import java_cup.runtime.*;

action code{:
	String l="";
	String h="";
	String retornar;
	:}

terminal coma, abrirLlave,cerrarLlave,mas,menos,multiplicacion,division,modulo,igual,identificador,constlit,definir,abrirParentesis,cerrarParentesis,vacio,entero,flotante,constint,constfloat,puntoyComa,devolver;

non terminal PROGRAM,DEFINES,CTES,PARTES,PART,RESTPART,BLQ,LISTPARAM,TYPE,SENTLIST,SENT,LID,LEXP,EXP,OP,FACTOR;


precedence left multiplicacion;
precedence left division;
precedence left modulo;
precedence left menos;
precedence left mas;



PROGRAM ::= DEFINES:defines PARTES:partes {:
			CONJUNTO = "program" + "main" + ";" + "\n" + defines + "\n" + partes;
		:} ;


DEFINES ::=  definir identificador:id CTES:ctes DEFINES:defines {:
			CONJUNTO = "const " + "\n" + "\t" + id + "=" + ctes + ";" + "\n" + defines;
		:}
	|;
	

CTES ::= constint {:
			CONJUNTO = constint;
		:}
	| constfloat {:
			CONJUNTO = constfloat;
		:}
	| constlit {:
			CONJUNTO = conslit;
		:} ;


PARTES ::= PART:part PARTES:partes {:
				CONJUNTO = part + partes;
		:}
	| PART:PART {:
				CONJUNTO = part + main;
		:};


PART ::= TYPE:type RESTPART:restpart {:
			if (type=="void"){	
				CONJUNTO = "procedure " + restpart + ";" + "\n";
			} else {
				h= " : " + type;
				CONJUNTO = "function " + restpart + ";" + "\n";	
			}
		:} ;


RESTPART ::= identificador:id abrirParentesis LISTPARAM:listparam cerrarParentesis BLQ:blq {:
			if ( "main" == id){
				CONJUNTO = "var" + "\n" listaid + "\n" + blq;
			} else {	
				CONJUNTO = id + "(" + listparam + ")" + h + "\n" + "var" + "\n" + listaid + "\n" +blq;
			}
		:}
| identificador:id abrirParentesis vacio cerrarParentesis BLQ:blq {:
			if ( "main" == i){
				CONJUNTO = "var" + "\n" + listaid + "\n" + blq;
			} else {
				CONJUNTO = id + "()" + h +  "\n" + "var" + "\n" + listaid + "\n" + blq;
			}
		:} ;


BLQ ::= abrirLlave SENTLIST:sentlist cerrarLlave {:
			CONJUNTO = "begin"+ "\n" + sentlist + "end" + "\n" ;
		:} ;


LISTPARAM ::= LISTPARAM:listparam coma TYPE:type identificador:id {:
			CONJUNTO = listparam + id + ": " + type + "\n";
		:}
	| TYPE:type identificador:id {:
			CONJUNTO = id + ": " + type + "\n" ;
		:} ;


TYPE ::= vacio {:
			CONJUNTO = " ";
		:}
	| entero {:
			CONJUNTO = "INTEGER";
		:}
	| flotante {:
			CONJUNTO = "FLOAT";
		:};


SENTLIST ::= SENTLIST:sentlist SENT:sent {:
			CONJUNTO = sentlist + sent;
		:}
	| SENT:sent {:
			CONJUNTO = sent;
		:};


SENT ::= TYPE:type LID:lid puntoyComa {:
			l = l + lid + " : " + type + ";" + "\n"; 
		:}
	| identificador:id igual EXP:exp puntoyComa {:
			CONJUNTO = id + ":= " + exp + ";";
		:}
	| identificador:id abrirParentesis LEXP:lexp cerrarParentesis puntoyComa {:
			CONJUNTO = id + "(" + lexp ")" + ";" + "\n";
		:}
	| identificador:id abrirParentesis cerrarParentesis puntoyComa {:
			CONJUNTO = id + "(" + ")" + ";" + "\n";
		:}
	| devolver EXP:exp puntoyComa {:
			retornar = exp;
		:};


LID ::= identificador:id {:
			CONJUNTO = id;
		:} 
	| LID:lid coma identificador:id {:
			CONJUNTO = lid + ", " + id;
		:};


LEXP ::= EXP:exp {:
			CONJUNTO = exp;
		:} 
 	| LEXP:lexp coma EXP:exp {:
			CONJUNTO = lexp + "," + exp;
		:};


EXP ::= EXP:exp1 OP:op EXP:exp2 {:
			CONJUNTO = exp1 + " " + op + " " exp2;
		:}
	| FACTOR:factor {:
			CONJUNTO = factor;
		:};


OP ::= multiplicacion:mul {:
			CONJUNTO = "*";
		:}
	| division:div{:
			CONJUNTO = "/";
		:} 
	| modulo:mod{:
			CONJUNTO = "%";
		:}
	| mas:suma {:
			CONJUNTO = "+";
		:}
	| menos:resta {:
			CONJUNTO = "-";
		:};


FACTOR ::= identificador:id abrirParentesis LEXP:lexp cerrarParentesis {:



