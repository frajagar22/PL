import java_cup.runtime.*;

terminal coma, abrirLlave,cerrarLlave,mas,menos,multiplicacion,division,modulo,igual,identificador,constlit,definir,abrirParentesis,cerrarParentesis,vacio,entero,flotante,constint,constfloat,puntoyComa,devolver;

non terminal PROGRAM,DEFINES,CTES,PARTES,PART,RESTPART,BLQ,LISTPARAM,TYPE,SENTLIST,SENT,LID,LEXP,EXP,OP,FACTOR;

precedence left multiplicacion;
precedence left division;
precedence left modulo;
precedence left menos;
precedence left mas;



PROGRAM ::= DEFINES PARTES;
DEFINES ::=  definir identificador CTES DEFINES|;
CTES ::= constint | constfloat | constlit;
PARTES ::= PART PARTES | PART;
PART ::= TYPE RESTPART;
RESTPART ::= identificador abrirParentesis LISTPARAM cerrarParentesis BLQ | identificador abrirParentesis vacio cerrarParentesis BLQ;
BLQ ::= abrirLlave SENTLIST cerrarLlave;
LISTPARAM ::= LISTPARAM coma TYPE identificador | TYPE identificador;
TYPE ::= vacio | entero | flotante;
SENTLIST ::= SENTLIST SENT | SENT;
SENT ::= TYPE LID puntoyComa | identificador igual EXP puntoyComa | identificador abrirParentesis LEXP cerrarParentesis puntoyComa
| identificador abrirParentesis cerrarParentesis puntoyComa | devolver EXP puntoyComa;


LID ::= identificador:id {:
			CONJUNTO = id;
		:} 
	| LID:lid coma identificador:id {:
			CONJUNTO = lid + ", " + id;
		:};


LEXP ::= EXP:exp {:
			CONJUNTO = exp;
		:} 
 	| LEXP:lexp coma EXP:exp {:
			CONJUNTO = lexp + "," + exp;
		:};


EXP ::= EXP:exp1 OP:op EXP:exp2 {:
			CONJUNTO = exp1 + " " + op + " " exp2;
		:}
	| FACTOR:factor {:
			CONJUNTO = factor;
		:};


OP ::= multiplicacion:mul {:
			CONJUNTO = mul.toString();
		:}
	| division:div{:
			CONJUNTO = div.toString();
		:} 
	| modulo:mod{:
			CONJUNTO = mod.toString();
		:}
	| mas:suma {:
			CONJUNTO = suma.toString();
		:}
	| menos:resta {:
			CONJUNTO = resta.toString();
		:};


FACTOR ::= identificador abrirParentesis LEXP:lexp cerrarParentesis {:
			CONJUNTO= id + "(" + lexp + ")";
		:}
	| identificador:id abrirParentesis cerrarParentesis {:
			CONJUNTO = id + "()";
		:}		
	| abrirParentesis EXP:exp cerrarParentesis {:
			CONJUNTO = "(" + exp + ")";
		:}
	| identificador:id {:
			CONJUNTO = id;
		:}
	| CTES:cte :{
			CONJUNTO = cte;
		:};






