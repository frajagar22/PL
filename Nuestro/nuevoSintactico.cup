import java_cup.runtime.*;

terminal coma, abrirLlave,cerrarLlave,mas,menos,multiplicacion,division,modulo,igual,identificador,constlit,definir,abrirParentesis,cerrarParentesis,vacio,entero,flotante,constint,constfloat,puntoyComa,devolver;

non terminal PROGRAM,DEFINES,CTES,PARTES,PART,RESTPART,BLQ,LISTPARAM,TYPE,SENTLIST,SENT,LID,LEXP,EXP,OP,FACTOR;

precedence left multiplicacion;
precedence left division;
precedence left modulo;
precedence left menos;
precedence left mas;



PROGRAM ::= DEFINES PARTES;


DEFINES ::=  definir identificador CTES DEFINES|;


CTES ::= constint | constfloat | constlit;


PARTES ::= PART PARTES | PART;


PART ::= TYPE RESTPART;


RESTPART ::= identificador abrirParentesis LISTPARAM cerrarParentesis BLQ {:
			
		:}
| identificador abrirParentesis vacio cerrarParentesis BLQ {:

		:};


BLQ ::= abrirLlave SENTLIST:sentlist cerrarLlave {:
			CONJUNTO = "begin"+ "\n" + sentlist + "end" + "\n" ;
		:} ;


LISTPARAM ::= LISTPARAM:listparam coma TYPE:type identificador:id {:
			CONJUNTO = listparam + id + ": " + type + "\n";
		:}
	| TYPE:type identificador:id {:
			CONJUNTO = id + ": " + type + "\n" ;
		:} ;


TYPE ::= vacio {:
			CONJUNTO = " ";
		:}
	| entero {:
			CONJUNTO = "INTEGER";
		:}
	| flotante {:
			CONJUNTO = "FLOAT";
		:};


SENTLIST ::= SENTLIST:sentlist SENT:sent {:
			CONJUNTO = sentlist + sent;
		:}
	| SENT:sent {:
			CONJUNTO = sent;
		:};


SENT ::= TYPE:type LID:lid puntoyComa {:
			l = l + " : " + type + ";" + "\n"; 
		:}
	| identificador:id igual EXP:exp puntoyComa {:
			CONJUNTO = id + ":= " + exp + ";";
		:}
	| identificador:id abrirParentesis LEXP:lexp cerrarParentesis puntoyComa {:
			CONJUNTO = id + "(" + lexp ")" + ";" + "\n";
		:}
	| identificador:id abrirParentesis cerrarParentesis puntoyComa {:
			CONJUNTO = id + "(" + ")" + ";" + "\n";
		:}
	| devolver EXP puntoyComa {:

		:};


LID ::= identificador:id {:
			CONJUNTO = id;
		:} 
	| LID:lid coma identificador:id {:
			CONJUNTO = lid + ", " + id;
		:};


LEXP ::= EXP:exp {:
			CONJUNTO = exp;
		:} 
 	| LEXP:lexp coma EXP:exp {:
			CONJUNTO = lexp + "," + exp;
		:};


EXP ::= EXP:exp1 OP:op EXP:exp2 {:
			CONJUNTO = exp1 + " " + op + " " exp2;
		:}
	| FACTOR:factor {:
			CONJUNTO = factor;
		:};


OP ::= multiplicacion:mul {:
			CONJUNTO = "*";
		:}
	| division:div{:
			CONJUNTO = "/";
		:} 
	| modulo:mod{:
			CONJUNTO = "%";
		:}
	| mas:suma {:
			CONJUNTO = "+";
		:}
	| menos:resta {:
			CONJUNTO = "-";
		:};


FACTOR ::= identificador:id abrirParentesis LEXP:lexp cerrarParentesis {:
			CONJUNTO= id + "(" + lexp + ")";
		:}
	| identificador:id abrirParentesis cerrarParentesis {:
			CONJUNTO = id + "()";
		:}		
	| abrirParentesis EXP:exp cerrarParentesis {:
			CONJUNTO = "(" + exp + ")";
		:}
	| identificador:id {:
			CONJUNTO = id;
		:}
	| CTES:cte :{
			CONJUNTO = cte;
		:};






